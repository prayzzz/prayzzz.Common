# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  containers:
  - container: dev1
    image: ubuntu:16.04

variables:
  BuildConfiguration: Release
  Major: '1'
  Minor: '0'
  Patch: '0'
  BranchName: $(Build.SourceBranchName)
  BuildRevision: $[counter('buildrevision', 100)]
  BuildVersion: $(Major).$(Minor).$(Patch).$(BuildRevision)-$(Build.SourceBranchName)

name: $(Major).$(Minor).$(Patch).$(BuildRevision)-$(Build.SourceBranchName)
  
jobs:
- job: Build and Test
  pool:
    name: default
  container: dev1
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: build'
      projects: '**/*.csproj'
      arguments: --configuration $(BuildConfiguration)

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*.Test.csproj'
      arguments: --configuration $(BuildConfiguration)

- job: Build CI Package
  pool:
    name: default
  container: dev1
  dependsOn: Build and Test
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  steps:
  - task: DotNetCoreCLI@2
    inputs:
        command: pack
        packagesToPack: '**/*.csproj;-:**/*.Test.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: BuildVersion

  - task: DotNetCoreCLI@2
    condition: not(failed())
    inputs:
        command: push
        publishVstsFeed: nupkg

- job: Build Release Package
  pool:
    name: default
  container: dev1
  dependsOn: Build and Test
  condition: startsWith('refs/tags/', variables['Build.SourceBranch'])
  steps:
  - task: DotNetCoreCLI@2
    inputs:
        command: pack
        packagesToPack: '**/*.csproj;-:**/*.Test.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: BranchName

  - task: DotNetCoreCLI@2
    condition: not(failed())
    inputs:
        command: push
        publishVstsFeed: nupkg

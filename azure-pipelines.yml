# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  BuildConfiguration: Release
  Major: '1'
  Minor: '0'
  Patch: '0'
  BranchName: $(Build.SourceBranchName)
  BuildRevision: $[counter('buildrevision', 100)]
  BuildVersion: $(Major).$(Minor).$(Patch).$(BuildRevision)-$(Build.SourceBranchName)

name: $(Major).$(Minor).$(Patch).$(BuildRevision)-$(Build.SourceBranchName)
  
steps:
- task: DotNetCoreCLI@2
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: --configuration $(BuildConfiguration)

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*.Test.csproj'
    arguments: --configuration $(BuildConfiguration)

#
# Create CI packages
#

- task: DotNetCoreCLI@2
  condition: and(not(failed()), not(eq(variables['Build.Reason'], 'PullRequest')))
  inputs:
    command: pack
    packagesToPack: '**/*.csproj;-:**/*.Test.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: BuildVersion

- task: DotNetCoreCLI@2
  condition: and(not(failed()), not(eq(variables['Build.Reason'], 'PullRequest')))
  inputs:
    command: push
    publishVstsFeed: nupkg

#
# END Create CI packages
#

#
# Create RELEASE packages
#

- task: DotNetCoreCLI@2
  condition: and(not(failed()), startsWith($(Build.SourceBranch), 'refs/tags/')))
  inputs:
    command: pack
    packagesToPack: '**/*.csproj;-:**/*.Test.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: BranchName

- task: DotNetCoreCLI@2
  condition: and(not(failed()), startsWith($(Build.SourceBranch), 'refs/tags/')))
  inputs:
    command: push
    publishVstsFeed: nupkg

#
# END Create RELEASE packages
#
